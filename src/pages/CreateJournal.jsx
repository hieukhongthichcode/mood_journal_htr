import React, { useState, useContext } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import { AuthContext } from '../context/AuthContext';

function CreateJournal() {
  const [title, setTitle] = useState('');
  const [content, setContent] = useState('');
  const [emotion, setEmotion] = useState(null);
  const navigate = useNavigate();
  const { token, addJournal } = useContext(AuthContext);

  const NODE_URL = import.meta.env.VITE_BACKEND_URL;
  const FLASK_URL = import.meta.env.VITE_FLASK_URL;

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      // 1Ô∏è‚É£ G·ªçi Flask ƒë·ªÉ ph√¢n t√≠ch c·∫£m x√∫c
      const analysisRes = await axios.post(`${FLASK_URL}/analyze`, { content });
      const { label, score } = analysisRes.data;

      // 2Ô∏è‚É£ G·ªçi NodeJS ƒë·ªÉ l∆∞u journal (g·ª≠i ƒë√∫ng schema BE c·∫ßn)
      const response = await axios.post(
        `${NODE_URL}/api/journals`,
        {
          title,
          content,
          mood: label,       // üëà string
          moodScore: score,  // üëà number
        },
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      console.log('‚úÖ ƒê√£ t·∫°o journal:', response.data);

      // 3Ô∏è‚É£ C·∫≠p nh·∫≠t chart v·ªõi d·ªØ li·ªáu chu·∫©n
      if (addJournal) {
        const newJournal = {
          ...response.data,
          mood: response.data.mood || label,
          moodScore: response.data.moodScore || score,
        };
        addJournal(newJournal);
      }

      // 4Ô∏è‚É£ Hi·ªÉn th·ªã ph√¢n t√≠ch c·∫£m x√∫c
      setEmotion({ label, score });

    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫°o b√†i vi·∫øt:', error.response?.data || error.message);
      alert('T·∫°o b√†i vi·∫øt th·∫•t b·∫°i, ki·ªÉm tra log!');
    }
  };

  return (
    <div className="min-h-screen bg-yellow-50 dark:bg-slate-900 py-12 px-4 mt-6">
      <div className="max-w-3xl mx-auto bg-[url('https://www.transparenttextures.com/patterns/paper-fibers.png')] bg-repeat rounded-3xl shadow-2xl p-10 border-l-[6px] border-yellow-400 dark:border-yellow-600">
        <h1 className="text-4xl font-bold text-center mb-8 text-yellow-800 dark:text-yellow-300">
          üìñ S·ªï Nh·∫≠t K√Ω C·∫£m X√∫c
        </h1>

        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label className="block text-lg font-medium text-yellow-900 dark:text-yellow-100">
              Ti√™u ƒë·ªÅ ‚ú®
            </label>
            <input
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="mt-2 block w-full rounded-lg border-gray-300 shadow-md focus:ring-2 focus:ring-yellow-400 p-3 text-lg dark:bg-slate-800 dark:text-white"
              placeholder="H√¥m nay c·ªßa b·∫°n nh∆∞ th·∫ø n√†o?"
              required
            />
          </div>

          <div>
            <label className="block text-lg font-medium text-yellow-900 dark:text-yellow-100">
              N·ªôi dung üìù
            </label>
            <textarea
              value={content}
              onChange={(e) => setContent(e.target.value)}
              rows="6"
              className="mt-2 block w-full rounded-lg border-gray-300 shadow-md focus:ring-2 focus:ring-yellow-400 p-3 text-lg dark:bg-slate-800 dark:text-white"
              placeholder="H√£y vi·∫øt nh·∫≠t k√Ω c·ªßa b·∫°n ·ªü ƒë√¢y..."
              required
            ></textarea>
          </div>

          <button
            type="submit"
            className="w-full bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-3 px-6 rounded-lg shadow-lg transition transform hover:scale-105"
          >
            ‚úçÔ∏è L∆∞u Nh·∫≠t K√Ω
          </button>
        </form>

        {emotion && (
          <div className="mt-10 bg-yellow-100 dark:bg-slate-700 border-l-4 border-yellow-400 dark:border-yellow-500 p-5 rounded-lg shadow-sm">
            <h3 className="text-xl font-bold text-yellow-900 dark:text-yellow-200 mb-2">
              üß† Ph√¢n T√≠ch C·∫£m X√∫c:
            </h3>
            <p className="text-gray-800 dark:text-gray-100">
              <strong>C·∫£m x√∫c:</strong> {emotion.label}
            </p>
            <p className="text-gray-800 dark:text-gray-100">
              <strong>M·ª©c ƒë·ªô ch·∫Øc ch·∫Øn:</strong> {(emotion.score * 100).toFixed(2)}%
            </p>

            <button
              onClick={() => navigate('/home', { state: { reload: true } })}
              className="mt-4 bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded-lg transition"
            >
              üìä Xem bi·ªÉu ƒë·ªì c·∫£m x√∫c
            </button>
          </div>
        )}
      </div>
    </div>
  );
}

export default CreateJournal;
