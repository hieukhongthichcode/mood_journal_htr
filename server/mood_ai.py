from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import os

app = Flask(__name__)

# üîí Domain frontend ƒë∆∞·ª£c ph√©p g·ªçi API
FRONTEND_DOMAINS = [
    "https://mood-journal-htr.vercel.app",  # production
    "https://mood-journal-htr-git-main-hieutrs-projects.vercel.app",  # preview
    "http://localhost:5173"  # local dev
]
CORS(app, resources={r"/*": {"origins": FRONTEND_DOMAIN}})

# ---------------------------
# üí° Health Check
# ---------------------------
@app.route("/", methods=["GET"])
def home():
    return jsonify({
        "service": "Mood AI API",
        "status": "running",
        "allowed_origin": FRONTEND_DOMAIN,
        "routes": {
            "/": "GET - Health check",
            "/analyze": "POST - Ph√¢n t√≠ch c·∫£m x√∫c (body: {content|text, moodLabel(optional), isUpdate(optional)})"
        }
    }), 200

# ---------------------------
# üß† Hugging Face Config
# ---------------------------
HF_API_TOKEN = os.environ.get("HF_API_TOKEN")
HF_MODEL = "uitnlp/vietnamese-sentiment"
API_URL = f"https://api-inference.huggingface.co/models/{HF_MODEL}"
HEADERS = {"Authorization": f"Bearer {HF_API_TOKEN}"} if HF_API_TOKEN else {}

# ---------------------------
# üìö Keyword Mapping (VN)
# ---------------------------
keyword_mapping = {
    # Anger
    "t·ª©c": "anger", "gi·∫≠n": "anger", "b·ª±c": "anger", "c√°u": "anger", "n√≥ng": "anger",
    "ƒëi√™n": "anger", "·ª©c": "anger", "h·∫≠n": "anger", "ch·ª≠i": "anger", "g·∫Øt": "anger",

    # Sadness
    "bu·ªìn": "sadness", "ch√°n": "sadness", "kh√≥c": "sadness", "c√¥ ƒë∆°n": "sadness",
    "tuy·ªát v·ªçng": "sadness", "m·ªát": "sadness", "t·ªïn th∆∞∆°ng": "sadness",
    "th·∫•t v·ªçng": "sadness", "tr·ªëng r·ªóng": "sadness", "u s·∫ßu": "sadness",

    # Joy
    "vui": "joy", "h·∫°nh ph√∫c": "joy", "y√™u": "joy", "tho·∫£i m√°i": "joy",
    "h√†i l√≤ng": "joy", "th√≠ch": "joy", "ph·∫•n kh·ªüi": "joy", "t∆∞∆°i": "joy",
    "may m·∫Øn": "joy", "c∆∞·ªùi": "joy",

    # Fear
    "s·ª£": "fear", "lo": "fear", "run": "fear", "ho·∫£ng": "fear", "√°m ·∫£nh": "fear",
    "b·∫•t an": "fear", "lo l·∫Øng": "fear", "r√πng m√¨nh": "fear", "s·ª£ h√£i": "fear", "d√® d·∫∑t": "fear",

    # Disgust
    "gh√™": "disgust", "g·ªõm": "disgust", "kh√≥ ch·ªãu": "disgust", "b·∫©n": "disgust",
    "kinh": "disgust", "khinh": "disgust", "gh√©t": "disgust", "d·ªã ·ª©ng": "disgust",
    "ch√°n gh√©t": "disgust", "ph·∫´n n·ªô": "disgust",

    # Neutral
    "b√¨nh th∆∞·ªùng": "neutral", "·ªïn": "neutral", "ok": "neutral", "kh√¥ng sao": "neutral",
    "b√¨nh tƒ©nh": "neutral", "d·ª≠ng d∆∞ng": "neutral", "trung l·∫≠p": "neutral",
    "ƒë∆∞·ª£c": "neutral", "th∆∞·ªùng": "neutral", "t·∫°m ·ªïn": "neutral"
}

# ---------------------------
# üîç Ph√¢n t√≠ch b·∫±ng t·ª´ kh√≥a
# ---------------------------
def analyze_by_keywords(text: str):
    text = text.lower()
    for k, v in keyword_mapping.items():
        if k in text:
            return {
                "label": v,
                "score": 0.95,
                "method": "keyword"
            }
    return None

# ---------------------------
# ü§ñ HuggingFace + mapping
# ---------------------------
def map_hf_to_six(label: str):
    """Map nh√£n HF -> 6 lo·∫°i"""
    label = label.lower()
    if label == "positive":
        return "joy"
    elif label == "negative":
        return "sadness"
    elif label == "neutral":
        return "neutral"
    return "neutral"

def analyze_by_hgf(text: str):
    try:
        payload = {"inputs": text}
        response = requests.post(API_URL, headers=HEADERS, json=payload, timeout=15)

        if response.status_code != 200:
            return {"label": "neutral", "score": 0.0, "method": "huggingface"}

        result = response.json()

        # X·ª≠ l√Ω k·∫øt qu·∫£ nested [[{label, score}]]
        if isinstance(result, list) and len(result) > 0 and isinstance(result[0], list):
            result = result[0]

        if isinstance(result, list) and len(result) > 0:
            best = max(result, key=lambda x: x.get("score", 0))
            mapped = map_hf_to_six(best.get("label", "neutral"))
            return {
                "label": mapped,
                "score": best.get("score", 0.0),
                "method": "huggingface"
            }

        return {"label": "neutral", "score": 0.0, "method": "huggingface"}
    except Exception:
        return {"label": "neutral", "score": 0.0, "method": "huggingface"}

# ---------------------------
# üìù API
# ---------------------------
@app.route("/analyze", methods=["POST"])
def analyze():
    try:
        data = request.get_json(force=True, silent=True) or {}
        content = data.get("content") or data.get("text")
        user_selected_label = data.get("moodLabel")
        is_update = data.get("isUpdate", False)

        if not content:
            return jsonify({"error": "Thi·∫øu content ho·∫∑c text"}), 400

        # N·∫øu user update + ch·ªçn tay ‚Üí ∆∞u ti√™n
        if is_update and user_selected_label:
            return jsonify({
                "label": user_selected_label.lower(),
                "score": 1.0,
                "method": "manual"
            })

        # Check t·ª´ kh√≥a tr∆∞·ªõc
        keyword_result = analyze_by_keywords(content)
        if keyword_result:
            return jsonify(keyword_result)

        # N·∫øu kh√¥ng c√≥ keyword ‚Üí g·ªçi HuggingFace
        hf_result = analyze_by_hgf(content)
        return jsonify(hf_result)

    except Exception as e:
        return jsonify({
            "label": "neutral",
            "score": 0.0,
            "method": "error",
            "error": str(e)
        }), 500

# ---------------------------
# üöÄ Run
# ---------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
