from flask import Flask, request, jsonify
from flask_cors import CORS
import requests
import os
from datetime import datetime
from pymongo import MongoClient

app = Flask(__name__)

# üîí Ch·ªâ cho ph√©p domain frontend (Vercel) g·ªçi API
FRONTEND_DOMAIN = "https://mood-journal-htr-git-main-hieutrs-projects.vercel.app"
CORS(app, resources={r"/*": {"origins": FRONTEND_DOMAIN}})

@app.after_request
def after_request(response):
    response.headers.add("Access-Control-Allow-Origin", FRONTEND_DOMAIN)
    response.headers.add("Access-Control-Allow-Headers", "Content-Type,Authorization")
    response.headers.add("Access-Control-Allow-Methods", "GET,POST,OPTIONS")
    return response

# ---------------------------
# üí° Health Check
# ---------------------------
@app.route("/", methods=["GET"])
def home():
    return jsonify({
        "service": "Mood AI API",
        "status": "running",
        "allowed_origin": FRONTEND_DOMAIN,
        "routes": {
            "/": "GET - Health check",
            "/analyze": "POST - Ph√¢n t√≠ch c·∫£m x√∫c",
            "/journals": "POST - T·∫°o b√†i vi·∫øt k√®m c·∫£m x√∫c"
        }
    }), 200

# ---------------------------
# üß† Hugging Face Config
# ---------------------------
HF_API_TOKEN = os.environ.get("HF_API_TOKEN")
HF_MODEL = "uitnlp/vietnamese-sentiment"
API_URL = f"https://api-inference.huggingface.co/models/{HF_MODEL}"
HEADERS = {"Authorization": f"Bearer {HF_API_TOKEN}"} if HF_API_TOKEN else {}

# ---------------------------
# üóÑ MongoDB Config
# ---------------------------
MONGO_URL = os.environ.get("MONGO_URL", "mongodb://localhost:27017")
client = MongoClient(MONGO_URL)
db = client["mood_journal"]

# ---------------------------
# üìö Keyword Mapping
# ---------------------------
keyword_mapping = {
    # Anger
    "t·ª©c": "anger", "gi·∫≠n": "anger", "b·ª±c": "anger", "c√°u": "anger", "n√≥ng": "anger",
    "ƒëi√™n": "anger", "·ª©c": "anger", "h·∫≠n": "anger", "ch·ª≠i": "anger", "g·∫Øt": "anger",
    # Sadness
    "bu·ªìn": "sadness", "ch√°n": "sadness", "kh√≥c": "sadness", "c√¥ ƒë∆°n": "sadness",
    "tuy·ªát v·ªçng": "sadness", "m·ªát": "sadness", "t·ªïn th∆∞∆°ng": "sadness", "th·∫•t v·ªçng": "sadness",
    "tr·ªëng r·ªóng": "sadness", "u s·∫ßu": "sadness",
    # Joy
    "vui": "joy", "h·∫°nh ph√∫c": "joy", "y√™u": "joy", "tho·∫£i m√°i": "joy", "h√†i l√≤ng": "joy",
    "th√≠ch": "joy", "ph·∫•n kh·ªüi": "joy", "t∆∞∆°i": "joy", "may m·∫Øn": "joy", "c∆∞·ªùi": "joy",
    # Fear
    "s·ª£": "fear", "lo": "fear", "run": "fear", "ho·∫£ng": "fear", "√°m ·∫£nh": "fear",
    "b·∫•t an": "fear", "lo l·∫Øng": "fear", "r√πng m√¨nh": "fear", "s·ª£ h√£i": "fear", "d√® d·∫∑t": "fear",
    # Disgust
    "gh√™": "disgust", "g·ªõm": "disgust", "kh√≥ ch·ªãu": "disgust", "b·∫©n": "disgust",
    "kinh": "disgust", "khinh": "disgust", "gh√©t": "disgust", "d·ªã ·ª©ng": "disgust",
    "ch√°n gh√©t": "disgust", "ph·∫´n n·ªô": "disgust",
    # Neutral
    "b√¨nh th∆∞·ªùng": "neutral", "·ªïn": "neutral", "ok": "neutral", "kh√¥ng sao": "neutral",
    "b√¨nh tƒ©nh": "neutral", "d·ª≠ng d∆∞ng": "neutral", "trung l·∫≠p": "neutral", "ƒë∆∞·ª£c": "neutral",
    "th∆∞·ªùng": "neutral", "t·∫°m ·ªïn": "neutral"
}

# ---------------------------
# üîç Ph√¢n t√≠ch c·∫£m x√∫c b·∫±ng t·ª´ kh√≥a
# ---------------------------
def analyze_by_keywords(text: str):
    text = text.lower()
    for k, v in keyword_mapping.items():
        if k in text:
            return {"label": v, "original_label": k, "score": 0.95, "method": "keyword"}
    return None

# ---------------------------
# ü§ñ Ph√¢n t√≠ch c·∫£m x√∫c b·∫±ng HuggingFace + mapping
# ---------------------------
def map_hf_to_six(label: str):
    label = label.lower()
    if label == "positive": return "joy"
    elif label == "negative": return "sadness"
    elif label == "neutral": return "neutral"
    return "neutral"

def analyze_by_hgf(text: str):
    try:
        response = requests.post(API_URL, headers=HEADERS, json={"inputs": text}, timeout=15)
        if response.status_code != 200:
            return {"label": "neutral", "score": 0.0, "method": "huggingface", "error": f"HF API error {response.status_code}"}
        result = response.json()
        if isinstance(result, list) and len(result) > 0:
            best = max(result, key=lambda x: x.get("score", 0))
            return {"label": map_hf_to_six(best.get("label", "neutral")), "original_label": best.get("label"), "score": best.get("score", 0.0), "method": "huggingface"}
        return {"label": "neutral", "score": 0.0, "method": "huggingface", "error": "K·∫øt qu·∫£ r·ªóng"}
    except Exception as e:
        return {"label": "neutral", "score": 0.0, "method": "huggingface", "error": str(e)}

# ---------------------------
# üìù API ph√¢n t√≠ch c·∫£m x√∫c
# ---------------------------
@app.route("/analyze", methods=["POST"])
def analyze():
    data = request.get_json(force=True, silent=True) or {}
    content = data.get("content") or data.get("text")
    user_selected_label = data.get("moodLabel")
    is_update = data.get("isUpdate", False)

    if not content:
        return jsonify({"error": "Thi·∫øu content"}), 400

    if is_update and user_selected_label:
        return jsonify({"label": user_selected_label.lower(), "original_label": user_selected_label, "score": 1.0, "method": "manual"})

    keyword_result = analyze_by_keywords(content)
    if keyword_result: return jsonify(keyword_result)

    result = analyze_by_hgf(content)
    return jsonify(result)

# ---------------------------
# ‚úçÔ∏è API T·∫°o Journal
# ---------------------------
@app.route("/journals", methods=["POST"])
def create_journal():
    try:
        data = request.get_json(force=True, silent=True) or {}
        title = data.get("title")
        content = data.get("content")
        user_id = data.get("userId")

        if not content:
            return jsonify({"error": "Thi·∫øu content"}), 400

        # üîç Ph√¢n t√≠ch c·∫£m x√∫c
        keyword_result = analyze_by_keywords(content)
        mood_result = keyword_result if keyword_result else analyze_by_hgf(content)

        # üì¶ L∆∞u MongoDB
        journal = {
            "title": title,
            "content": content,
            "userId": user_id,
            "createdAt": datetime.utcnow(),
            "updatedAt": datetime.utcnow(),
            "date": datetime.utcnow(),
            "moodLabel": mood_result["label"],
            "moodScore": mood_result["score"]
        }
        inserted = db.journals.insert_one(journal)
        journal["_id"] = str(inserted.inserted_id)

        return jsonify({"message": "T·∫°o b√†i vi·∫øt th√†nh c√¥ng", "journal": journal}), 201
    except Exception as e:
        return jsonify({"error": f"L·ªói khi t·∫°o journal: {str(e)}"}), 500

# ---------------------------
# üöÄ Run app
# ---------------------------
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port, debug=False)
