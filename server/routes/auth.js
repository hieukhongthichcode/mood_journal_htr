const express = require('express');
const router = express.Router();
const User = require('../models/User');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');

const JWT_SECRET = process.env.JWT_SECRET;

// ‚úÖ ƒêƒÉng k√Ω
router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;
  if (!username || !email || !password) {
    return res.status(400).json({ message: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin.' });
  }

  try {
    const existingUser = await User.findOne({ email });
    if (existingUser) return res.status(400).json({ message: 'Email ƒë√£ t·ªìn t·∫°i' });

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      username,
      email,
      password: hashedPassword,
    });

    await newUser.save();
    res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng k√Ω' });
  }
});

// ‚úÖ ƒêƒÉng nh·∫≠p
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ message: 'Email kh√¥ng t·ªìn t·∫°i' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ message: 'Sai m·∫≠t kh·∫©u' });

    const token = jwt.sign({ id: user._id }, JWT_SECRET, { expiresIn: '2h' });

    res.json({
      token,
      user: {
        _id: user._id, // üîç d√πng _id ƒë·ªÉ frontend d√πng ƒë√∫ng
        name: user.name || user.username,
        email: user.email,
        avatar: user.avatar || null,
      },
    });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: 'L·ªói server khi ƒëƒÉng nh·∫≠p' });
  }
});

// ‚úÖ C·∫≠p nh·∫≠t profile ng∆∞·ªùi d√πng (name, avatar)
router.put('/:id', async (req, res) => {
  try {
    const { name, avatar } = req.body;

    const updatedUser = await User.findByIdAndUpdate(
      req.params.id,
      { name, avatar },
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng' });
    }

    res.json({
      _id: updatedUser._id,
      name: updatedUser.name || updatedUser.username,
      email: updatedUser.email,
      avatar: updatedUser.avatar || null,
    });
  } catch (error) {
    console.error("L·ªói khi c·∫≠p nh·∫≠t profile:", error);
    res.status(500).json({ message: 'L·ªói server khi c·∫≠p nh·∫≠t profile' });
  }
});

module.exports = router;
